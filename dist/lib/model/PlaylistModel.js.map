{"version":3,"file":"PlaylistModel.js","sourceRoot":"","sources":["../../../src/lib/model/PlaylistModel.ts"],"names":[],"mappings":"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","sourcesContent":["import yt2 from '../YouTube2Context';\nimport { PageElement } from '../types';\nimport Endpoint, { EndpointType } from '../types/Endpoint';\nimport PageContent from '../types/PageContent';\nimport { SectionItem } from '../types/PageElement';\nimport WatchContent, { WatchContinuationContent } from '../types/WatchContent';\nimport { rnd, sleep } from '../util';\nimport EndpointModel from './EndpointModel';\n\nexport default class PlaylistModel extends EndpointModel {\n\n  async getContents(endpoint: Endpoint & { type: EndpointType.Watch; }): Promise<WatchContent | null>;\n  async getContents(endpoint: Endpoint & { type: EndpointType.WatchContinuation; }): Promise<WatchContinuationContent | null>;\n  async getContents(endpoint: Endpoint & { type: EndpointType.Browse | EndpointType.Search | EndpointType.BrowseContinuation | EndpointType.SearchContinuation; }): Promise<PageContent | null>;\n  async getContents(endpoint: Endpoint & { type: EndpointType; }): Promise<WatchContent | PageContent | null>;\n  async getContents(endpoint: Endpoint): Promise<WatchContent | WatchContinuationContent | PageContent | null> {\n    if (endpoint.type !== EndpointType.Browse && endpoint.type !== EndpointType.BrowseContinuation) {\n      throw Error(`PlaylistModel.getContents() expects endpoint type Browse or BrowseContinuation, but got ${endpoint.type}`);\n    }\n\n    const contents = await super.getContents({...endpoint, type: endpoint.type});\n    const loadAll = yt2.getConfigValue('loadFullPlaylists');\n    if (!loadAll || !contents) {\n      return contents;\n    }\n\n    // Look for section with continuation - there should only be one, if any.\n    const targetSection = this.#findSectionWithContinuation(contents.sections);\n    if (targetSection?.continuation) {\n      yt2.getLogger().info(`[youtube2] PlaylistModel is going to recursively fetch continuation items for playlist with endpoint: ${JSON.stringify(endpoint)}).`);\n      const continuationItems = await this.#getContinuationItems(targetSection.continuation);\n      targetSection.items.push(...continuationItems);\n      yt2.getLogger().info(`[youtube2] Total ${continuationItems.length} continuation items fetched. Total items in playlist: ${targetSection.items.length}.`);\n      delete targetSection.continuation;\n    }\n\n    return contents;\n  }\n\n  async #getContinuationItems(continuation: PageElement.Section['continuation'], recursive = true, currentItems: SectionItem[] = []) {\n    if (!continuation) {\n      return [];\n    }\n\n    const contents = await this.getContents({...continuation.endpoint, type: EndpointType.BrowseContinuation});\n\n    // There should only be one section for playlist continuation items\n    const targetSection = contents?.sections?.[0];\n    if (targetSection?.items) {\n      currentItems.push(...targetSection.items);\n\n      yt2.getLogger().info(`[youtube2] Fetched ${targetSection.items.length} continuation items.`);\n\n      if (recursive && targetSection.continuation) {\n        await sleep(rnd(200, 400)); // Rate limit\n        await this.#getContinuationItems(targetSection.continuation, recursive, currentItems);\n        delete targetSection.continuation;\n      }\n    }\n\n    return currentItems;\n  }\n\n  #findSectionWithContinuation(sections?: PageElement.Section[]): PageElement.Section | null {\n    if (!sections) {\n      return null;\n    }\n\n    for (const section of sections) {\n      if (section.continuation) {\n        return section;\n      }\n\n      const nestedSections = section.items?.filter((item) => item.type === 'section');\n      if (nestedSections?.length > 0) {\n        const result = this.#findSectionWithContinuation(nestedSections as PageElement.Section[]);\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n"]}