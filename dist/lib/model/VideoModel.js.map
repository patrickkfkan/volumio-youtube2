{"version":3,"file":"VideoModel.js","sourceRoot":"","sources":["../../../src/lib/model/VideoModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {type YT, type Types, Utils, type Innertube} from 'volumio-yt-support/dist/innertube';\nimport yt2 from '../YouTube2Context';\nimport type VideoPlaybackInfo from '../types/VideoPlaybackInfo';\nimport { BaseModel } from './BaseModel';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport InnertubeLoader from './InnertubeLoader';\n\n// https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2\nconst ITAG_TO_BITRATE: Record<string, string> = {\n  '139': '48',\n  '140': '128',\n  '141': '256',\n  '171': '128',\n  '249': '50',\n  '250': '70',\n  '251': '160'\n};\n\nconst BEST_AUDIO_FORMAT: Types.FormatOptions = {\n  type: 'audio',\n  format: 'any',\n  quality: 'best'\n};\n\ninterface HLSPlaylistVariant {\n  quality?: string;\n  url?: string;\n}\n\nexport default class VideoModel extends BaseModel {\n\n  async getPlaybackInfo(videoId: string, client?: Types.InnerTubeClient, signal?: AbortSignal): Promise<VideoPlaybackInfo | null> {\n    const { innertube } = await this.getInnertube();\n\n    try {\n      client = client ?? 'WEB';\n\n      const contentPoToken = (await InnertubeLoader.generatePoToken(videoId)).poToken;\n      yt2.getLogger().info(`[ytmusic] Obtained PO token for video #${videoId}: ${contentPoToken}`);\n\n      const info = await innertube.getBasicInfo(videoId, { client, po_token: contentPoToken });\n      if (signal?.aborted) {\n        throw Error('Aborted');\n      }\n      const basicInfo = info.basic_info;\n\n      if (!basicInfo.is_live &&\n        client === 'WEB'\n      ) {\n        // For non-live videos, WEB client returns SABR streams which Innertube can't decipher.\n        // We need to switch to WEB_EMBEDDED client wih TV as fallback.\n        return await this.getPlaybackInfo(videoId, 'WEB_EMBEDDED', signal);\n      }\n\n      const result: VideoPlaybackInfo = {\n        type: 'video',\n        title: basicInfo.title,\n        author: {\n          channelId: basicInfo.channel_id,\n          name: basicInfo.author\n        },\n        description: basicInfo.short_description,\n        thumbnail: InnertubeResultParser.parseThumbnail(basicInfo.thumbnail) || '',\n        isLive: !!basicInfo.is_live,\n        duration: basicInfo.duration,\n        addToHistory: () => {\n          return info?.addToWatchHistory();\n        }\n      };\n\n      if (info.playability_status?.status === 'UNPLAYABLE') {\n        // Check if this video has a trailer (non-purchased movies / films)\n        if (info.has_trailer) {\n          const trailerInfo = info.getTrailerInfo();\n          if (trailerInfo) {\n            result.stream = await this.#chooseFormat(innertube, trailerInfo);\n          }\n        }\n        else {\n          throw Error(info.playability_status.reason);\n        }\n      }\n      else if (!result.isLive) {\n        try {\n          result.stream = await this.#chooseFormat(innertube, info);\n        }\n        catch (error) {\n          if (error instanceof Utils.PlayerError && client !== 'TV') {\n            // Error with WEB_EMBEDDED client - retry with TV\n            yt2.getLogger().warn(`[youtube2] Error getting stream with ${client} client in VideoModel.getInfo(${videoId}): ${error.message} - retry with 'TV' client.`);\n            return await this.getPlaybackInfo(videoId, 'TV', signal);\n          }\n          throw error;\n        }\n      }\n      else {\n        const hlsManifestUrl = info.streaming_data?.hls_manifest_url;\n        const streamUrlFromHLS = hlsManifestUrl ? await this.#getStreamUrlFromHLS(hlsManifestUrl, yt2.getConfigValue('liveStreamQuality')) : null;\n        result.stream = streamUrlFromHLS ? { url: streamUrlFromHLS } : null;\n      }\n\n      if (result.stream && !result.isLive) {\n        // Innertube sets `pot` searchParam of URL to session-bound PO token.\n        // Seems YT now requires `pot` to be the *content-bound* token, otherwise we'll get 403.\n        // See: https://github.com/TeamNewPipe/NewPipeExtractor/issues/1392\n        const urlObj = new URL(result.stream.url);\n        urlObj.searchParams.set('pot', contentPoToken);\n        result.stream.url = urlObj.toString();\n      }\n\n      // Might need to wait a few seconds before stream becomes accessible (instead of getting 403 Forbidden).\n      // We add a test routine here and sleep for a while between retries\n      // See: https://github.com/yt-dlp/yt-dlp/issues/14097\n      if (result.stream) {\n        const startTime = new Date().getTime();\n        yt2.getLogger().info(`[youtube2] VideoModel.getInfo(${videoId}): validating stream URL \"${result.stream.url}\"...`);\n        let tries = 0;\n        let testStreamResult = await this.#head(result.stream.url, signal);\n        while (!testStreamResult.ok && tries < 3) {\n          if (signal?.aborted) {\n            throw Error('Aborted');\n          }\n          yt2.getLogger().warn(`[youtube2] VideoModel.getInfo(${videoId}): stream validation failed (${testStreamResult.status} - ${testStreamResult.statusText}); retrying after 2s...`);\n          await this.#sleep(2000);\n          tries++;\n          testStreamResult = await this.#head(result.stream.url);\n        }\n        const endTime = new Date().getTime();\n        const timeTaken = (endTime - startTime) / 1000;\n        if (tries === 3) {\n          yt2.getLogger().warn(`[youtube2] VideoModel.getInfo(${videoId}): failed to validate stream URL \"${result.stream.url}\" (retried ${tries} times in ${timeTaken}s).`);\n        }\n        else {\n          yt2.getLogger().info(`[youtube2] VideoModel.getInfo(${videoId}): stream validated in ${timeTaken}s.`);\n        }\n      }\n\n      if (signal?.aborted) {\n        throw Error('Aborted');\n      }\n\n      return result;\n    }\n    catch (error) {\n      yt2.getLogger().error(yt2.getErrorMessage(`[youtube2] Error in VideoModel.getInfo(${videoId}): `, error));\n      return null;\n    }\n  }\n\n  #sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async #head(url: string, signal?: AbortSignal) {\n    const res = await fetch(url, { method: 'HEAD', signal });\n    return {\n      ok: res.ok,\n      status: res.status,\n      statusText: res.statusText\n    };\n  }\n\n  async #chooseFormat(innertube: Innertube, videoInfo: YT.VideoInfo): Promise<VideoPlaybackInfo['stream'] | null> {\n    const format = videoInfo?.chooseFormat(BEST_AUDIO_FORMAT);\n    const streamUrl = format ? await format.decipher(innertube.session.player) : null;\n    // eslint-disable-next-line @typescript-eslint/no-misused-spread\n    const streamData = format ? { ...format, url: streamUrl } : null;\n    return this.#parseStreamData(streamData);\n  }\n\n  #parseStreamData(data: any): VideoPlaybackInfo['stream'] | null {\n    if (!data) {\n      return null;\n    }\n\n    const audioBitrate = ITAG_TO_BITRATE[data.itag];\n\n    return {\n      url: data.url,\n      mimeType: data.mime_type,\n      bitrate: audioBitrate ? `${audioBitrate} kbps` : null,\n      sampleRate: data.audio_sample_rate,\n      channels: data.audio_channels\n    };\n  }\n\n  async #getStreamUrlFromHLS(manifestUrl: string, targetQuality: string) {\n    if (!manifestUrl) {\n      return null;\n    }\n\n    if (!targetQuality || targetQuality === 'auto') {\n      return manifestUrl;\n    }\n\n    const res = await fetch(manifestUrl);\n    const manifestContents = await res.text();\n\n    // Match Resolution and Url\n    const regex = /#EXT-X-STREAM-INF.*RESOLUTION=(\\d+x\\d+).*[\\r\\n](.+)/gm;\n\n    const playlistVariants: HLSPlaylistVariant[] = [];\n\n    // Modified from regex101's code generator :)\n    let m: any;\n    while ((m = regex.exec(manifestContents)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      const variant: HLSPlaylistVariant = {};\n      playlistVariants.push(variant);\n\n      m.forEach((match: string, groupIndex: number) => {\n        if (groupIndex === 1) { // Resolution\n          variant.quality = `${match.split('x')[1]}p`;\n        }\n        if (groupIndex === 2) {\n          variant.url = match;\n        }\n      });\n    }\n\n    // Find matching variant or closest one that is lower than targetQuality\n    const targetQualityInt = parseInt(targetQuality);\n    const diffs = playlistVariants.map((variant) => ({\n      variant,\n      qualityDelta: targetQualityInt - (variant.quality ? parseInt(variant.quality) : 0)\n    }));\n    const closest = diffs.filter((v) => v.qualityDelta >= 0).sort((v1, v2) => v1.qualityDelta - v2.qualityDelta)[0];\n\n    return closest?.variant.url || playlistVariants[0]?.url || null;\n  }\n}\n"]}