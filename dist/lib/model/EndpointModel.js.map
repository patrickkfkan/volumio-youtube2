{"version":3,"file":"EndpointModel.js","sourceRoot":"","sources":["../../../src/lib/model/EndpointModel.ts"],"names":[],"mappings":";;;;;AAAA,6DAAgE;AAChE,2CAAwC;AACxC,gDAA2D;AAC3D,oFAA4D;AAI5D,MAAqB,aAAc,SAAQ,qBAAS;IAMlD,KAAK,CAAC,WAAW,CAAC,QAAkB;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEtC,IAAI,GAA6B,CAAC;QAClC,QAAQ,QAAQ,EAAE,IAAI,EAAE;YACtB,KAAK,uBAAY,CAAC,MAAM,CAAC;YACzB,KAAK,uBAAY,CAAC,kBAAkB;gBAClC,GAAG,GAAG,SAAS,CAAC;gBAChB,MAAM;YACR,KAAK,uBAAY,CAAC,KAAK,CAAC;YACxB,KAAK,uBAAY,CAAC,iBAAiB;gBACjC,GAAG,GAAG,OAAO,CAAC;gBACd,MAAM;YACR,KAAK,uBAAY,CAAC,MAAM,CAAC;YACzB,KAAK,uBAAY,CAAC,kBAAkB;gBAClC,GAAG,GAAG,SAAS,CAAC;gBAChB,MAAM;YACR;gBACE,GAAG,GAAG,IAAI,CAAC;SACd;QAED,IAAI,GAAG,IAAI,SAAS,EAAE;YACpB,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YACxE,MAAM,MAAM,GAAG,4BAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B;YAC/E,OAAO,+BAAqB,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe;SACjF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAnCD,gCAmCC","sourcesContent":["import { InnertubeEndpoint, Parser } from 'volumio-youtubei.js';\nimport { BaseModel } from './BaseModel';\nimport Endpoint, { EndpointType } from '../types/Endpoint';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport WatchContent, { WatchContinuationContent } from '../types/WatchContent';\nimport PageContent from '../types/PageContent';\n\nexport default class EndpointModel extends BaseModel {\n\n  async getContents(endpoint: Endpoint & {type: EndpointType.Watch}): Promise<WatchContent | null>;\n  async getContents(endpoint: Endpoint & {type: EndpointType.WatchContinuation}): Promise<WatchContinuationContent | null>;\n  async getContents(endpoint: Endpoint & {type: EndpointType.Browse | EndpointType.BrowseContinuation | EndpointType.Search | EndpointType.SearchContinuation}): Promise<PageContent | null>;\n  async getContents(endpoint: Endpoint & {type: EndpointType}): Promise<PageContent | WatchContent | null>;\n  async getContents(endpoint: Endpoint) {\n    const innertube = this.getInnertube();\n\n    let url: InnertubeEndpoint | null;\n    switch (endpoint?.type) {\n      case EndpointType.Browse:\n      case EndpointType.BrowseContinuation:\n        url = '/browse';\n        break;\n      case EndpointType.Watch:\n      case EndpointType.WatchContinuation:\n        url = '/next';\n        break;\n      case EndpointType.Search:\n      case EndpointType.SearchContinuation:\n        url = '/search';\n        break;\n      default:\n        url = null;\n    }\n\n    if (url && innertube) {\n      const response = await innertube.actions.execute(url, endpoint.payload);\n      const parsed = Parser.parseResponse(response.data); // First parse by InnerTube\n      return InnertubeResultParser.parseResult(parsed, endpoint.type); // Second parse\n    }\n\n    return null;\n  }\n}\n"]}