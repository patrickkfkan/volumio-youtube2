{"version":3,"file":"AccountModel.js","sourceRoot":"","sources":["../../../src/lib/model/AccountModel.ts"],"names":[],"mappings":";;;;;AACA,gDAAiD;AACjD,2CAAwC;AACxC,oFAA4D;AAE5D,MAAqB,YAAa,SAAQ,qBAAS;IAEjD,KAAK,CAAC,OAAO;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEtC,IAAI,SAAS,EAAE;YACb,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAE/C,wFAAwF;YACxF,uDAAuD;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAO,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAC1E,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,+BAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAExF,IAAI,OAAO,IAAI,WAAW,EAAE;gBAC1B,MAAM,MAAM,GAAyB;oBACnC,IAAI,EAAE,WAAW;oBACjB,KAAK,EAAE,+BAAqB,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC;iBACnE,CAAC;gBAEF,MAAM,YAAY,GAAG,+BAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,iBAAiB;gBACzF,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,IAAI,YAAY,EAAE,EAAE,UAAU;oBACtD,MAAM,CAAC,OAAO,GAAG;wBACf,KAAK,EAAE,YAAY;wBACnB,QAAQ,EAAE,+BAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,uBAAY,CAAC,MAAM,CAAC;qBAC1F,CAAC;iBACH;gBAED,OAAO,MAAM,CAAC;aACf;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjCD,+BAiCC","sourcesContent":["import { PluginConfig } from '../types';\nimport { EndpointType } from '../types/Endpoint';\nimport { BaseModel } from './BaseModel';\nimport InnertubeResultParser from './InnertubeResultParser';\n\nexport default class AccountModel extends BaseModel {\n\n  async getInfo(): Promise<PluginConfig.Account | null> {\n    const innertube = this.getInnertube();\n\n    if (innertube) {\n      const info = await innertube.account.getInfo();\n\n      // This plugin supports single sign-in, so there should only be one account in contents.\n      // But we still get the 'selected' one just to be sure.\n      const account = info.contents?.contents.find((ac: any) => ac.is_selected);\n      const accountName = account ? InnertubeResultParser.unwrap(account.account_name) : null;\n\n      if (account && accountName) {\n        const result: PluginConfig.Account = {\n          name: accountName,\n          photo: InnertubeResultParser.parseThumbnail(account.account_photo)\n        };\n\n        const channelTitle = InnertubeResultParser.unwrap(info.footers?.title); // 'Your channel'\n        if (info.footers?.endpoint && channelTitle) { // Channel\n          result.channel = {\n            title: channelTitle,\n            endpoint: InnertubeResultParser.parseEndpoint(info.footers.endpoint, EndpointType.Browse)\n          };\n        }\n\n        return result;\n      }\n    }\n\n    return null;\n  }\n}\n"]}