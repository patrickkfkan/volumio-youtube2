{"version":3,"file":"AccountModel.js","sourceRoot":"","sources":["../../../src/lib/model/AccountModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6DAAkE;AAElE,gDAAiD;AACjD,2CAAwC;AACxC,oFAA4D;AAC5D,kCAAuC;AACvC,yEAAqC;AACrC,6DAA6D;AAE7D,MAAqB,YAAa,SAAQ,qBAAS;IAAnD;;;IA8DA,CAAC;IA5DC,KAAK,CAAC,OAAO;QACX,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAChD,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,0CAAqB,EAAC,SAAS,CAAC,CAAC;QAExE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO;gBACL,UAAU,EAAE,KAAK;gBACjB,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,wBAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC1C,wFAAwF;QACxF,uDAAuD;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,6BAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,CAAC;QAEnG,IAAI,OAAO,EAAE,EAAE,CAAC,6BAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,GAAG,+BAAqB,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAEjE,IAAI,IAAI,EAAE,CAAC;gBACT,MAAM,MAAM,GAAyB;oBACnC,IAAI;oBACJ,KAAK,EAAE,+BAAqB,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC;iBACnE,CAAC;gBAEF,IAAI,CAAC;oBACH,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,6DAAgB,MAApB,IAAI,CAAkB,CAAC;oBAC7C,IAAI,OAAO,EAAE,CAAC;wBACZ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBAC3B,CAAC;gBACH,CAAC;gBACD,OAAO,KAAc,EAAE,CAAC;oBACtB,yBAAG,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,yBAAG,CAAC,eAAe,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC,CAAC;gBACxG,CAAC;gBAED,OAAO;oBACL,UAAU,EAAE,IAAI;oBAChB,IAAI,EAAE,MAAM;iBACb,CAAC;YACJ,CAAC;QACH,CAAC;QAED,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAA;IACzD,CAAC;CAiBF;wEAfC,KAAK;IACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC3C,MAAM,KAAK,GAAG,IAAA,mBAAY,EAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E,IAAI,KAAK,EAAE,CAAC;QACV,MAAM,IAAI,GAAG,IAAI,0BAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,+BAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,uBAAY,CAAC,MAAM,CAAC,CAAC;QACzF,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7D,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,IAAI;gBAChB,QAAQ;aACT,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;kBA7DkB,YAAY","sourcesContent":["import { YTNodes, Misc as YTMisc, YT } from 'volumio-youtubei.js';\nimport { type PluginConfig } from '../types';\nimport { EndpointType } from '../types/Endpoint';\nimport { BaseModel } from './BaseModel';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport { findInObject } from '../util';\nimport yt2 from '../YouTube2Context';\nimport { getAccountInitialInfo } from './AccountModelHelper';\n\nexport default class AccountModel extends BaseModel {\n\n  async getInfo() {\n    const { innertube } = await this.getInnertube();\n    const { isSignedIn, response } = await getAccountInitialInfo(innertube);\n\n    if (!isSignedIn) {\n      return {\n        isSignedIn: false,\n        info: null\n      };\n    }\n\n    const info = new YT.AccountInfo(response);   \n    // This plugin supports single sign-in, so there should only be one account in contents.\n    // But we still get the 'selected' one just to be sure.\n    const account = info.contents?.contents.find((ac) => ac.is(YTNodes.AccountItem) && ac.is_selected);\n\n    if (account?.is(YTNodes.AccountItem)) {\n      const name = InnertubeResultParser.unwrap(account?.account_name);\n\n      if (name) {\n        const result: PluginConfig.Account = {\n          name,\n          photo: InnertubeResultParser.parseThumbnail(account.account_photo)\n        };\n\n        try {\n          const channel = await this.#getChannelInfo();\n          if (channel) {\n            result.channel = channel;\n          }\n        }\n        catch (error: unknown) {\n          yt2.getLogger().error(yt2.getErrorMessage('[youtube2] AccountModel.#getChannelInfo() error:', error));\n        }\n\n        return {\n          isSignedIn: true,\n          info: result\n        };\n      }\n    }\n\n    throw Error('Signed in but unable to get account info')\n  }\n\n  async #getChannelInfo() {\n    const menu = await this.fetchAccountMenu();\n    const title = findInObject(menu, (key) => key === 'manageAccountTitle')[0];\n    if (title) {\n      const text = new YTMisc.Text(title);\n      const endpoint = InnertubeResultParser.parseEndpoint(text.endpoint, EndpointType.Browse);\n      if (text.text && endpoint?.payload.browseId.startsWith('UC')) {\n        return {\n          title: text.text,\n          endpoint\n        };\n      }\n    }\n    return null;\n  }\n}\n"]}